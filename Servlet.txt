package web;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class HelloServlet extends HttpServlet{
	
	/**
	 * Servlet容器会调用Servlet的构造器，
	 * 创建Servlet对象。
	 */
	public HelloServlet(){
		System.out.println(
				"HelloServlet的构造器");
	}
	
	
	/**
	 * Servlet容器收到请求之后，会调用Servlet的
	 * service方法来处理请求。
	 * 
	 * Servlet容器会将请求数据包中的数据解析出来，
	 * 然后将解析到的数据添加到request对象里面，
	 * 同时，还会创建一个response对象。
	 * 
	 * 容器会将request对象和response对象作为参数
	 * 传过来，开发人员只需要调用request对象和response
	 * 对象的方法即可(不再需要处理网络相关的问题)。
	 * 
	 * 
	 */
	public void service(
			HttpServletRequest request,
			HttpServletResponse response)
	throws ServletException,IOException{
		
		System.out.println(
				"HelloServlet的service方法");
		
		/*
		 * 依据请求参数名获得请求参数值。
		 * 注：
		 * 	如果请求参数名写错，会返回null值。
		 */
		String username = 
				request.getParameter("username");
		String age = 
				request.getParameter("age");
		
		System.out.println("username:" + username 
				+ " age:" + age);
		/*
		 * 服务器端，一定要对请求参数值
		 * 做合法性的检查，比如，检查参数值
		 * 是否为null，是否是非数字等等。
		 */
		Integer.parseInt(age);
		
		
		/*
		 * 设置响应类型。
		 * 注：
		 * 	 这行代码用于设置
		 * content-type消息头的
		 * 值。浏览器收到之后，就会按照指定的类型去
		 * 解析。
		 */
		response.setContentType("text/html");
		/*
		 * 获得输出流。
		 */
		PrintWriter out = 
				response.getWriter();
		/*
		 * 将处理结果写到response对象里面。
		 * 容器会从response对象中获取处理结果，
		 * 然后创建一个响应数据包，发给浏览器。
		 */
		out.println("<h1>Hello Kitty</h1>");
		
		out.close();
	}
	
	
	
}
